[20:19, 09/04/2024] Prakash khatiwada:      public class MathUtil {
    public static double add(double num1, double num2) {
        return num1 + num2;
    }
    public static double subtract(double num1, double num2) {
        return num1 - num2;
    }
    public static double multiply(double num1, double num2) {
        return num1 * num2;
    }
    public static double divide(double num1, double num2) {
        if (num2 == 0) {
            throw new IllegalArgumentException("Divisor cannot be zero.");
        }
        return num1 / num2;
    }
    public static void main(String[] args) {
        System.out.println("Addition: " + MathUtil.add(3, 5));
        System.out.println("Subtraction: " + MathUtil.subtract(10, 4));
        System.out.println("Multiplication: " + MathUtil.multiply(7, 8));
        System.out.println("Division: " + MathUtil.divide(12, 4));
    }
}
[20:19, 09/04/2024] Prakash khatiwada: Addition: 8.0
Subtraction: 6.0
Multiplication: 56.0
Division: 3.0
[20:33, 09/04/2024] Prakash khatiwada: 17 public final class BankAccount {

    private final String accountNumber;
    private double balance;

    public BankAccount(String accountNumber, double initialBalance) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
    }

    public final String getAccountNumber() {
        return accountNumber;
    }

    public final double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount < 0) {
            throw new IllegalArgumentException("Deposit amount must be positive.");
        }
        balance += amount;
    }

    public void withdraw(double amount) {
        if (amount < 0) {
            throw new IllegalArgumentException("Withdrawal amount must be positive.");
        }
        if (balance - amount < 0) {
            throw new IllegalArgumentException("Insufficient funds.");
        }
        balance -= amount;
    }

    public static void main(String[] args) {
        BankAccount account = new BankAccount("123456789", 1000);
        System.out.println("Account Number: " + account.getAccountNumber());
        System.out.println("Initial Balance: " + account.getBalance());

        account.deposit(500);
        System.out.println("Balance after deposit: " + account.getBalance());

        account.withdraw(200);
        System.out.println("Balance after withdrawal: " + account.getBalance());
    }
}
[20:34, 09/04/2024] Prakash khatiwada: Account Number: 123456789
Initial Balance: 1000.0
Balance after deposit: 1500.0
Balance after withdrawal: 1300.0
[20:38, 09/04/2024] Prakash khatiwada: 18   public class ExceptionHandlingDemo {

    public static void main(String[] args) {
        try {
            // ArithmeticException
            int result = 10 / 0; // This will throw ArithmeticException
        } catch (ArithmeticException e) {
            System.out.println("ArithmeticException caught: Division by zero is not allowed.");
        }

        try {
            // NumberFormatException
            String str = "abc";
            int num = Integer.parseInt(str); // This will throw NumberFormatException
        } catch (NumberFormatException e) {
            System.out.println("NumberFormatException caught: Invalid number format.");
        }
    }
}
[20:38, 09/04/2024] Prakash khatiwada: ArithmeticException caught: Division by zero is not allowed.
NumberFormatException caught: Invalid number format.
[20:47, 09/04/2024] Prakash khatiwada: 19      public class BankAccountSynchronization {

    private static class BankAccount {
        private double balance;

        public synchronized void deposit(double amount) {
            balance += amount;
            System.out.println("Deposited: " + amount + ", Balance: " + balance);
        }

        public synchronized void withdraw(double amount) {
            if (balance >= amount) {
                balance -= amount;
                System.out.println("Withdrew: " + amount + ", Balance: " + balance);
            } else {
                System.out.println("Insufficient balance to withdraw: " + amount);
            }
        }
    }

    private static class WithdrawThread implements Runnable {
        private BankAccount account;
        private double amount;

        public WithdrawThread(BankAccount account, double amount) {
            this.account = account;
            this.amount = amount;
        }

        @Override
        public void run() {
            account.withdraw(amount);
        }
    }

    private static class DepositThread implements Runnable {
        private BankAccount account;
        private double amount;

        public DepositThread(BankAccount account, double amount) {
            this.account = account;
            this.amount = amount;
        }

        @Override
        public void run() {
            account.deposit(amount);
        }
    }

    public static void main(String[] args) throws InterruptedException {
        BankAccount account = new BankAccount();
        Thread withdrawThread1 = new Thread(new WithdrawThread(account, 1000));
        Thread withdrawThread2 = new Thread(new WithdrawThread(account, 1000));
        Thread depositThread1 = new Thread(new DepositThread(account, 500));
        Thread depositThread2 = new Thread(new DepositThread(account, 500));

        withdrawThread1.start();
        withdrawThread2.start();
        depositThread1.start();
        depositThread2.start();

        withdrawThread1.join();
        withdrawThread2.join();
        depositThread1.join();
        depositThread2.join();
    }
}
[20:47, 09/04/2024] Prakash khatiwada: Insufficient balance to withdraw: 1000.0
Deposited: 500.0, Balance: 500.0
Deposited: 500.0, Balance: 1000.0
Withdrew: 1000.0, Balance: 0.0
[20:52, 09/04/2024] Prakash khatiwada: public class InterThreadCommunicationDemo {

    public static void main(String[] args) {
        Message message = new Message();

        Thread producerThread = new Thread(() -> {
            message.produce("Hello from Producer!");
        });

        Thread consumerThread = new Thread(() -> {
            message.consume();
        });

        producerThread.start();
        consumerThread.start();
    }

    static class Message {
        private String message;
        private boolean empty = true;

        public synchronized void produce(String message) {
            while (!empty) {
                try {
                    wait();
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            this.message = message;
            empty = false;
            System.out.println("Produced: " + message);
            notify();
        }

        public synchronized void consume() {
            while (empty) {
                try {
                    wait();
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            System.out.println("Consumed: " + message);
            empty = true;
            notify();
        }
    }
}
[20:53, 09/04/2024] Prakash khatiwada: java -cp /tmp/jaj0Uq3Hs3/InterThreadCommunicationDemo
Produced: Hello from Producer!
Consumed: Hello from Producer!

=== Code Execution Successful ===