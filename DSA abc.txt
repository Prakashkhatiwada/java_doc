16    #include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = newNode;
    return newNode;
}

Node* insertNode(Node* head, int data) {
    Node* newNode = createNode(data);

    if (head == NULL) {
        return newNode;
    }

    Node* last = head;
    while (last->next != head) {
        last = last->next;
    }

    last->next = newNode;
    newNode->next = head;
    return newNode;
}

Node* deleteNode(Node* head, int key) {
    if (head == NULL) {
        printf("List is empty\n");
        return NULL;
    }

    if (head->data == key) {
        Node* temp = head;
        head = head->next;
        free(temp);

        Node* last = head;
        while (last->next != head) {
            last = last->next;
        }
        last->next = head;

        return head;
    }

    Node* current = head;
    Node* previous = NULL;

    do {
        if (current->data == key) {
            previous->next = current->next;
            free(current);

            return head;
        }
        previous = current;
        current = current->next;
    } while (current != head);

    printf("Key not found\n");
    return head;
}

void printList(Node* head) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    Node* current = head;
    do {
        printf("%d -> ", current->data);
        current = current->next;
    } while (current != head);
    printf("head\n");
}

int main() {
    Node* head = NULL;
    head = insertNode(head, 10);
    head = insertNode(head, 20);
    head = insertNode(head, 30);
    printList(head);
    head = deleteNode(head, 20);
    printList(head);
    return 0;
}

18     #include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

void preOrderTraversal(Node* node) {
    if (node == NULL) {
        return;
    }

    printf("%d ", node->data);
    preOrderTraversal(node->left);
    preOrderTraversal(node->right);
}

void inOrderTraversal(Node* node) {
    if (node == NULL) {
        return;
    }

    inOrderTraversal(node->left);
    printf("%d ", node->data);
    inOrderTraversal(node->right);
}

void postOrderTraversal(Node* node) {
    if (node == NULL) {
        return;
    }

    postOrderTraversal(node->left);
    postOrderTraversal(node->right);
    printf("%d ", node->data);
}

int main() {
    Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    printf("Pre-order traversal: ");
    preOrderTraversal(root);
    printf("\n");

    printf("In-order traversal: ");
    inOrderTraversal(root);
    printf("\n");

    printf("Post-order traversal: ");
    postOrderTraversal(root);
    printf("\n");

    return 0;
}
